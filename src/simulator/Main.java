/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simulator;

import simulator.classes.impairments.AWGN;
import simulator.classes.codingSchemes.Hamming;
import simulator.classes.signals.*;
import simulator.classes.modulations.BPSK;
import simulator.classes.charts.*;
import simulator.classes.libraries.SignalFFT;
import simulator.classes.libraries.ArrayFunctions;
import simulator.classes.filters.LPF;

/**
 *
 * @author HP
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        optionsPanel = new javax.swing.JPanel();
        decodePanel = new javax.swing.JPanel();
        impairmentLabel1 = new javax.swing.JLabel();
        impairmentPowerLabel1 = new javax.swing.JLabel();
        filterTypeComboBox = new javax.swing.JComboBox<>();
        impairmentPowerLabel2 = new javax.swing.JLabel();
        filterCutoffFreqTextField = new javax.swing.JTextField();
        filterButton = new javax.swing.JButton();
        filteringWarningLabel = new javax.swing.JLabel();
        filterTapsTextField = new javax.swing.JTextField();
        filterPanel = new javax.swing.JPanel();
        inputMessageLabel6 = new javax.swing.JLabel();
        demodulateButton = new javax.swing.JButton();
        demodulationWarningLabel = new javax.swing.JLabel();
        domainPanel = new javax.swing.JPanel();
        impairmentLabel2 = new javax.swing.JLabel();
        thresholdButton = new javax.swing.JButton();
        timeDomainButton2 = new javax.swing.JButton();
        impairmentPanel = new javax.swing.JPanel();
        impairmentLabel = new javax.swing.JLabel();
        impairmentPowerLabel = new javax.swing.JLabel();
        impairmentPowerTextField = new javax.swing.JTextField();
        impairmentTypeComboBox = new javax.swing.JComboBox<>();
        impairmentButton = new javax.swing.JButton();
        impairmentWarningLabel = new javax.swing.JLabel();
        modulationPanel = new javax.swing.JPanel();
        inputMessageLabel3 = new javax.swing.JLabel();
        codingSchemeLabel1 = new javax.swing.JLabel();
        modulationSchemeComboBox = new javax.swing.JComboBox<>();
        modulateButton = new javax.swing.JButton();
        modulateWarningLabel = new javax.swing.JLabel();
        carrierPanel = new javax.swing.JPanel();
        inputMessageLabel2 = new javax.swing.JLabel();
        carrierFrequencyComboBox = new javax.swing.JComboBox<>();
        codingSchemeLabel2 = new javax.swing.JLabel();
        carrierButton = new javax.swing.JButton();
        carrierWarningLabel = new javax.swing.JLabel();
        codingPanel = new javax.swing.JPanel();
        inputMessageLabel1 = new javax.swing.JLabel();
        codingSchemeLabel = new javax.swing.JLabel();
        codingSchemeComboBox = new javax.swing.JComboBox<>();
        sampleNoLabel = new javax.swing.JLabel();
        sampleNoComboBox = new javax.swing.JComboBox<>();
        encodeWarningLabel = new javax.swing.JLabel();
        encodeAndSampleButton = new javax.swing.JButton();
        inputPanel = new javax.swing.JPanel();
        inputMessageLabel = new javax.swing.JLabel();
        messageLabel = new javax.swing.JLabel();
        inputBit2TextField = new javax.swing.JTextField();
        inputBit1TextField = new javax.swing.JTextField();
        inputBit3TextField = new javax.swing.JTextField();
        inputBit4TextField = new javax.swing.JTextField();
        inputWarningLabel = new javax.swing.JLabel();
        sendInputButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SIMULATOR");
        setLocation(new java.awt.Point(0, 0));
        setName("mainFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(700, 735));
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel.setMaximumSize(new java.awt.Dimension(700, 740));
        mainPanel.setMinimumSize(new java.awt.Dimension(700, 740));
        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setPreferredSize(new java.awt.Dimension(700, 740));

        optionsPanel.setBackground(new java.awt.Color(255, 255, 255));
        optionsPanel.setMaximumSize(new java.awt.Dimension(680, 680));
        optionsPanel.setMinimumSize(new java.awt.Dimension(680, 680));
        optionsPanel.setName("optionsPanel"); // NOI18N
        optionsPanel.setPreferredSize(new java.awt.Dimension(680, 680));

        decodePanel.setBackground(new java.awt.Color(239, 228, 176));
        decodePanel.setPreferredSize(new java.awt.Dimension(335, 162));

        impairmentLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        impairmentLabel1.setForeground(new java.awt.Color(0, 3, 3));
        impairmentLabel1.setText("Filtering");
        impairmentLabel1.setName(""); // NOI18N

        impairmentPowerLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        impairmentPowerLabel1.setForeground(new java.awt.Color(0, 0, 0));
        impairmentPowerLabel1.setText("Type of Filter");

        filterTypeComboBox.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        filterTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Low Pass" }));

        impairmentPowerLabel2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        impairmentPowerLabel2.setForeground(new java.awt.Color(0, 0, 0));
        impairmentPowerLabel2.setText("Cutoff Frequency");

        filterCutoffFreqTextField.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        filterCutoffFreqTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        filterButton.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        filterButton.setText("Filter");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        filteringWarningLabel.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        filteringWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        filteringWarningLabel.setText(" ");

        filterTapsTextField.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        filterTapsTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        filterTapsTextField.setEnabled(false);

        javax.swing.GroupLayout decodePanelLayout = new javax.swing.GroupLayout(decodePanel);
        decodePanel.setLayout(decodePanelLayout);
        decodePanelLayout.setHorizontalGroup(
            decodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(decodePanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(decodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(decodePanelLayout.createSequentialGroup()
                        .addComponent(filteringWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(decodePanelLayout.createSequentialGroup()
                        .addGroup(decodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(decodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(decodePanelLayout.createSequentialGroup()
                                    .addComponent(impairmentLabel1)
                                    .addGap(0, 0, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, decodePanelLayout.createSequentialGroup()
                                    .addGroup(decodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(impairmentPowerLabel1)
                                        .addComponent(impairmentPowerLabel2))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(decodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(decodePanelLayout.createSequentialGroup()
                                            .addComponent(filterTapsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(filterCutoffFreqTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(filterTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(decodePanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(filterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)))
                        .addGap(20, 20, 20))))
        );
        decodePanelLayout.setVerticalGroup(
            decodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, decodePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(impairmentLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(decodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(impairmentPowerLabel1)
                    .addComponent(filterTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(decodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(impairmentPowerLabel2)
                    .addComponent(filterCutoffFreqTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterTapsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filteringWarningLabel)
                .addGap(10, 10, 10)
                .addComponent(filterButton)
                .addContainerGap())
        );

        filterPanel.setBackground(new java.awt.Color(239, 228, 176));
        filterPanel.setPreferredSize(new java.awt.Dimension(335, 162));

        inputMessageLabel6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        inputMessageLabel6.setForeground(new java.awt.Color(0, 3, 3));
        inputMessageLabel6.setText("Demodulation");
        inputMessageLabel6.setName(""); // NOI18N

        demodulateButton.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        demodulateButton.setText("Demodulate");
        demodulateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                demodulateButtonActionPerformed(evt);
            }
        });

        demodulationWarningLabel.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        demodulationWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        demodulationWarningLabel.setText(" ");

        javax.swing.GroupLayout filterPanelLayout = new javax.swing.GroupLayout(filterPanel);
        filterPanel.setLayout(filterPanelLayout);
        filterPanelLayout.setHorizontalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filterPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputMessageLabel6)
                            .addComponent(demodulationWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(filterPanelLayout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(demodulateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        filterPanelLayout.setVerticalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputMessageLabel6)
                .addGap(11, 11, 11)
                .addComponent(demodulationWarningLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(demodulateButton)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        domainPanel.setBackground(new java.awt.Color(239, 228, 176));
        domainPanel.setPreferredSize(new java.awt.Dimension(335, 162));

        impairmentLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        impairmentLabel2.setForeground(new java.awt.Color(0, 3, 3));
        impairmentLabel2.setText("Decode and Result");
        impairmentLabel2.setName(""); // NOI18N

        thresholdButton.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        thresholdButton.setText("Threshold");
        thresholdButton.setToolTipText("");
        thresholdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thresholdButtonActionPerformed(evt);
            }
        });

        timeDomainButton2.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        timeDomainButton2.setText("Decode");
        timeDomainButton2.setToolTipText("");

        javax.swing.GroupLayout domainPanelLayout = new javax.swing.GroupLayout(domainPanel);
        domainPanel.setLayout(domainPanelLayout);
        domainPanelLayout.setHorizontalGroup(
            domainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(domainPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(domainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(domainPanelLayout.createSequentialGroup()
                        .addComponent(impairmentLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, domainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(thresholdButton)
                        .addGap(18, 18, 18)
                        .addComponent(timeDomainButton2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        domainPanelLayout.setVerticalGroup(
            domainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(domainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(impairmentLabel2)
                .addGap(35, 35, 35)
                .addGroup(domainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(thresholdButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeDomainButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        impairmentPanel.setBackground(new java.awt.Color(239, 228, 176));

        impairmentLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        impairmentLabel.setForeground(new java.awt.Color(0, 3, 3));
        impairmentLabel.setText("Impairment");
        impairmentLabel.setName(""); // NOI18N

        impairmentPowerLabel.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        impairmentPowerLabel.setForeground(new java.awt.Color(0, 0, 0));
        impairmentPowerLabel.setText("Power");

        impairmentPowerTextField.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        impairmentPowerTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        impairmentTypeComboBox.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        impairmentTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AWGN" }));

        impairmentButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        impairmentButton.setText("Add");
        impairmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                impairmentButtonActionPerformed(evt);
            }
        });

        impairmentWarningLabel.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        impairmentWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        impairmentWarningLabel.setText(" ");

        javax.swing.GroupLayout impairmentPanelLayout = new javax.swing.GroupLayout(impairmentPanel);
        impairmentPanel.setLayout(impairmentPanelLayout);
        impairmentPanelLayout.setHorizontalGroup(
            impairmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(impairmentPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(impairmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(impairmentPanelLayout.createSequentialGroup()
                        .addComponent(impairmentWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(impairmentPanelLayout.createSequentialGroup()
                        .addGroup(impairmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(impairmentPanelLayout.createSequentialGroup()
                                .addComponent(impairmentPowerLabel)
                                .addGap(36, 36, 36)
                                .addComponent(impairmentPowerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(impairmentTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(impairmentLabel))
                        .addGap(26, 26, 26))))
            .addGroup(impairmentPanelLayout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(impairmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        impairmentPanelLayout.setVerticalGroup(
            impairmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(impairmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(impairmentLabel)
                .addGroup(impairmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(impairmentPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(impairmentTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(impairmentPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(impairmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(impairmentPowerLabel)
                            .addComponent(impairmentPowerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(impairmentWarningLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(impairmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        modulationPanel.setBackground(new java.awt.Color(239, 228, 176));

        inputMessageLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        inputMessageLabel3.setForeground(new java.awt.Color(0, 3, 3));
        inputMessageLabel3.setText("Modulation");
        inputMessageLabel3.setName(""); // NOI18N

        codingSchemeLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        codingSchemeLabel1.setForeground(new java.awt.Color(0, 0, 0));
        codingSchemeLabel1.setText("Modulation Scheme");

        modulationSchemeComboBox.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        modulationSchemeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BPSK" }));

        modulateButton.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        modulateButton.setText("Modulate");
        modulateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modulateButtonActionPerformed(evt);
            }
        });

        modulateWarningLabel.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        modulateWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        modulateWarningLabel.setText(" ");

        javax.swing.GroupLayout modulationPanelLayout = new javax.swing.GroupLayout(modulationPanel);
        modulationPanel.setLayout(modulationPanelLayout);
        modulationPanelLayout.setHorizontalGroup(
            modulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modulationPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(modulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(modulationPanelLayout.createSequentialGroup()
                        .addComponent(inputMessageLabel3)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(modulationPanelLayout.createSequentialGroup()
                        .addComponent(codingSchemeLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(modulationSchemeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modulationPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(modulateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
            .addGroup(modulationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(modulateWarningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        modulationPanelLayout.setVerticalGroup(
            modulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modulationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputMessageLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(modulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codingSchemeLabel1)
                    .addComponent(modulationSchemeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(modulateWarningLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(modulateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        carrierPanel.setBackground(new java.awt.Color(239, 228, 176));

        inputMessageLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        inputMessageLabel2.setForeground(new java.awt.Color(0, 3, 3));
        inputMessageLabel2.setText("Generate Carrier");
        inputMessageLabel2.setName(""); // NOI18N

        carrierFrequencyComboBox.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        carrierFrequencyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8", "16" }));

        codingSchemeLabel2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        codingSchemeLabel2.setForeground(new java.awt.Color(0, 0, 0));
        codingSchemeLabel2.setText("Carrier Frequency");

        carrierButton.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        carrierButton.setText("Generate Carrier");
        carrierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carrierButtonActionPerformed(evt);
            }
        });

        carrierWarningLabel.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        carrierWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        carrierWarningLabel.setText(" ");

        javax.swing.GroupLayout carrierPanelLayout = new javax.swing.GroupLayout(carrierPanel);
        carrierPanel.setLayout(carrierPanelLayout);
        carrierPanelLayout.setHorizontalGroup(
            carrierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, carrierPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(carrierButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
            .addGroup(carrierPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(carrierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(carrierWarningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(carrierPanelLayout.createSequentialGroup()
                        .addComponent(codingSchemeLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(carrierFrequencyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(inputMessageLabel2))
                .addContainerGap())
        );
        carrierPanelLayout.setVerticalGroup(
            carrierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(carrierPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputMessageLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(carrierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codingSchemeLabel2)
                    .addComponent(carrierFrequencyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(carrierWarningLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(carrierButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        codingPanel.setBackground(new java.awt.Color(239, 228, 176));

        inputMessageLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        inputMessageLabel1.setForeground(new java.awt.Color(0, 3, 3));
        inputMessageLabel1.setText("Coding and Sampling");
        inputMessageLabel1.setName(""); // NOI18N

        codingSchemeLabel.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        codingSchemeLabel.setForeground(new java.awt.Color(0, 0, 0));
        codingSchemeLabel.setText("Coding Scheme");

        codingSchemeComboBox.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        codingSchemeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "HAMMING" }));

        sampleNoLabel.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        sampleNoLabel.setForeground(new java.awt.Color(0, 0, 0));
        sampleNoLabel.setText("Number of Samples");

        sampleNoComboBox.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        sampleNoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "128", "256", "512", "1024", "2048" }));

        encodeWarningLabel.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        encodeWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        encodeWarningLabel.setText(" ");

        encodeAndSampleButton.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        encodeAndSampleButton.setText("Encode and Sample");
        encodeAndSampleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encodeAndSampleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout codingPanelLayout = new javax.swing.GroupLayout(codingPanel);
        codingPanel.setLayout(codingPanelLayout);
        codingPanelLayout.setHorizontalGroup(
            codingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(codingPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(codingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(codingPanelLayout.createSequentialGroup()
                        .addComponent(inputMessageLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, codingPanelLayout.createSequentialGroup()
                        .addGroup(codingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(encodeWarningLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(codingPanelLayout.createSequentialGroup()
                                .addGroup(codingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(codingSchemeLabel)
                                    .addComponent(sampleNoLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(codingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(sampleNoComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(codingSchemeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(15, 15, 15))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, codingPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(encodeAndSampleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );
        codingPanelLayout.setVerticalGroup(
            codingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(codingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputMessageLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(codingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codingSchemeLabel)
                    .addComponent(codingSchemeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(codingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sampleNoLabel)
                    .addComponent(sampleNoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(encodeWarningLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encodeAndSampleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        inputPanel.setBackground(new java.awt.Color(239, 228, 176));
        inputPanel.setName("inputPanel"); // NOI18N

        inputMessageLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        inputMessageLabel.setForeground(new java.awt.Color(0, 3, 3));
        inputMessageLabel.setText("Input Message");
        inputMessageLabel.setName(""); // NOI18N

        messageLabel.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        messageLabel.setForeground(new java.awt.Color(0, 0, 0));
        messageLabel.setText("Message");

        inputBit2TextField.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        inputBit2TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        inputBit1TextField.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        inputBit1TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        inputBit3TextField.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        inputBit3TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        inputBit4TextField.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        inputBit4TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        inputWarningLabel.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        inputWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        inputWarningLabel.setText(" ");

        sendInputButton.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        sendInputButton.setText("Send");
        sendInputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendInputButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addComponent(messageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(inputBit1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(inputBit2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(inputBit3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(inputBit4TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(inputMessageLabel))
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sendInputButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67))
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputBit2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(messageLabel)
                        .addComponent(inputBit1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(inputBit3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(inputBit4TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(inputWarningLabel)
                .addGap(7, 7, 7)
                .addComponent(sendInputButton)
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsPanelLayout.createSequentialGroup()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(modulationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(carrierPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(codingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inputPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(filterPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                    .addComponent(impairmentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(decodePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                    .addComponent(domainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)))
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(impairmentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addComponent(codingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(carrierPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsPanelLayout.createSequentialGroup()
                        .addComponent(filterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(decodePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(modulationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(domainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))
                .addGap(41, 41, 41))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(optionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 694, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendInputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendInputButtonActionPerformed
        if (validateInput()) {
            double[] input = {
                Double.parseDouble(inputBit1TextField.getText()), 
                Double.parseDouble(inputBit2TextField.getText()), 
                Double.parseDouble(inputBit3TextField.getText()), 
                Double.parseDouble(inputBit4TextField.getText())
            };
            
            inputSignal = new BasebandSignal(4);
            inputSignal.setSignal(input);
            
//          PLOT SAMPLES
            oscilloscope.sendData(
                    "Input bits", 
                    new double[]{0, 1, 2, 3}, 
                    inputSignal.getSignal(), 
                    bitsXLabel, 
                    oscilloscopeYLabel, 
                    1, 
                    1,
                    lineChartType.POINTS);
            oscilloscope.pack();
            
            spectrometer.sendData(
                    "",
                    new double[0],
                    new double[0],
                    "",
                    "",
                    0,
                    0,
                    lineChartType.DEFAULT
            );
            spectrometer.pack();
                        
//          INPUT BITS MAY NOT REQUIRE SPECTROMETER !!!
//            SignalFFT inputFFT = new SignalFFT(samplingFrequency, inputSignal.getSignal());
//            spectrometer.sendData(
//                    "Input bits", 
//                    inputFFT.getFrequencies(), 
//                    inputFFT.getSingleSidedSpectrum(), 
//                    spectrometerXLabel, 
//                    spectrometerYLabel, 
//                    spectrometerXTickUnits, 
//                    spectrometerYTickUnits,
//                    lineChartType.DEFAULT);
//            spectrometer.pack();
        }
    }//GEN-LAST:event_sendInputButtonActionPerformed

    private void encodeAndSampleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encodeAndSampleButtonActionPerformed
        if (validateEncodingandSampling()) {
//          CODING
            if (codingSchemeComboBox.getSelectedItem() == "HAMMING") {
                double[] coded = new Hamming(inputSignal.getSignal()).getCodedWithParity();
                
                basebandSignal = new BasebandSignal(8);
                basebandSignal.setSignal(coded);
            }

//          GET SAMPLING TIME
            int sampleNo = Integer.parseInt(sampleNoComboBox.getSelectedItem().toString());
            messageSignal = new BasebandSignal(sampleNo);
            messageSignal.setSignal(basebandSignal.expandTo(sampleNo));
            
            samplingInterval = sampleTime / getSampleNumber();
            samplingFrequency = getSampleNumber();
            oscilloscopeXTickUnits = sampleTime / 8;
            
//          SAMPLING
            samplingIntervals = new double[getSampleNumber()];
            for (int i = 0; i < samplingIntervals.length; i++) {
                samplingIntervals[i] = samplingInterval * i;
            }
            
            
//          PLOT SAMPLES
            oscilloscope.sendData(
                    "Encoded and sampled bits", 
                    samplingIntervals, 
                    messageSignal.getSignal(), 
                    oscilloscopeXLabel, 
                    oscilloscopeYLabel, 
                    oscilloscopeXTickUnits, 
                    oscilloscopeYTickUnits, 
                    lineChartType.DEFAULT);
            oscilloscope.pack();
            
            SignalFFT messageFFT = new SignalFFT(samplingFrequency, messageSignal.getSignal());
            spectrometer.sendData(
                    "Encoded and sampled bits", 
                    messageFFT.getFrequenciesToMax(100), 
                    messageFFT.getSingleSidedSpectrumToMax(100), 
                    spectrometerXLabel, 
                    spectrometerYLabel, 
                    spectrometerXTickUnits, 
                    spectrometerYTickUnits, 
                    lineChartType.DEFAULT);
            spectrometer.pack();
        }
    }//GEN-LAST:event_encodeAndSampleButtonActionPerformed

    private void carrierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carrierButtonActionPerformed
        if (validateCarrierGeneration()) {
            int frequency = Integer.parseInt(carrierFrequencyComboBox.getSelectedItem().toString());

            carrierSignal = new CarrierSignal(getSampleNumber(), frequency);
            
//          PLOT SAMPLES
            oscilloscope.sendData(
                    "Carrier signal", 
                    samplingIntervals, 
                    carrierSignal.getSignal(), 
                    oscilloscopeXLabel, 
                    oscilloscopeYLabel, 
                    oscilloscopeXTickUnits, 
                    oscilloscopeYTickUnits, 
                    lineChartType.DEFAULT);
            oscilloscope.pack();
            
            SignalFFT carrierFFT = new SignalFFT(samplingFrequency, carrierSignal.getSignal());
            spectrometer.sendData(
                    "Carrier signal", 
                    carrierFFT.getFrequenciesToMax(100), 
                    carrierFFT.getSingleSidedSpectrumToMax(100), 
                    spectrometerXLabel, 
                    spectrometerYLabel, 
                    spectrometerXTickUnits, 
                    spectrometerYTickUnits, 
                    lineChartType.DEFAULT);
            spectrometer.pack();
        }
    }//GEN-LAST:event_carrierButtonActionPerformed

    private void modulateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modulateButtonActionPerformed
        String modulationScheme = modulationSchemeComboBox.getSelectedItem().toString();
        
        if (validateModulation()) {
            if ("BPSK".equals(modulationScheme)) {
                modulatedSignal = new Signal(getSampleNumber());
                
                BPSKmodulation = new BPSK(messageSignal.getSignal(), carrierSignal.getSignal());
                
                modulatedSignal.setSignal(
                        BPSKmodulation.getModulated()
                );
            }
            
//          PLOT SAMPLES
            oscilloscope.sendData(
                    "Modulated signal", 
                    samplingIntervals, 
                    modulatedSignal.getSignal(), 
                    oscilloscopeXLabel, 
                    oscilloscopeYLabel, 
                    oscilloscopeXTickUnits, 
                    oscilloscopeYTickUnits, 
                    lineChartType.DEFAULT);
            oscilloscope.pack();
            
            SignalFFT modulatedFFT = new SignalFFT(samplingFrequency, modulatedSignal.getSignal());
            spectrometer.sendData(
                    "Modulated signal", 
                    modulatedFFT.getFrequenciesToMax(100), 
                    modulatedFFT.getSingleSidedSpectrumToMax(100), 
                    spectrometerXLabel, 
                    spectrometerYLabel, 
                    spectrometerXTickUnits, 
                    spectrometerYTickUnits, 
                    lineChartType.DEFAULT);
            spectrometer.pack();
        }
    }//GEN-LAST:event_modulateButtonActionPerformed

    private void impairmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impairmentButtonActionPerformed
        String impairmentType = impairmentTypeComboBox.getSelectedItem().toString();
        
        if (validateImpairment()) {
            if ("AWGN".equals(impairmentType)) {
                double impairmentPower = Double.parseDouble(impairmentPowerTextField.getText());

                noise.readNoise("", getSampleNumber());
                double[] impairment_values = noise.setAmplitude(impairmentPower);
                double[] mod_plus_impairment = ArrayFunctions.add(modulatedSignal.getSignal(), impairment_values);

                receivedSignal = new Signal(getSampleNumber());
                receivedSignal.setSignal(mod_plus_impairment);
            }
            
//          PLOT SAMPLES
            oscilloscope.sendData(
                    "Received signal", 
                    samplingIntervals, 
                    receivedSignal.getSignal(), 
                    oscilloscopeXLabel, 
                    oscilloscopeYLabel, 
                    oscilloscopeXTickUnits, 
                    oscilloscopeYTickUnits, 
                    lineChartType.DEFAULT);
            oscilloscope.pack();
            
            SignalFFT receivedFFT = new SignalFFT(samplingFrequency, receivedSignal.getSignal());
            spectrometer.sendData(
                    "Received signal", 
                    receivedFFT.getFrequenciesToMax(100), 
                    receivedFFT.getSingleSidedSpectrumToMax(100), 
                    spectrometerXLabel, 
                    spectrometerYLabel, 
                    spectrometerXTickUnits, 
                    spectrometerYTickUnits, 
                    lineChartType.DEFAULT);
            spectrometer.pack();
        }
        
    }//GEN-LAST:event_impairmentButtonActionPerformed

    private void demodulateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_demodulateButtonActionPerformed
        if (validateDemodulation()) {
            demodulatedSignal = new Signal(getSampleNumber());
            demodulatedSignal.setSignal(BPSKmodulation.getDemodulated(receivedSignal.getSignal()));
            
//          PLOT SAMPLES
            oscilloscope.sendData(
                    "Demodulated signal", 
                    samplingIntervals, 
                    demodulatedSignal.getSignal(), 
                    oscilloscopeXLabel, 
                    oscilloscopeYLabel, 
                    oscilloscopeXTickUnits, 
                    oscilloscopeYTickUnits, 
                    lineChartType.DEFAULT);
            oscilloscope.pack();

            SignalFFT demodulatedFFT = new SignalFFT(samplingFrequency, demodulatedSignal.getSignal());
            spectrometer.sendData(
                    "Demodulated signal", 
                    demodulatedFFT.getFrequenciesToMax(100), 
                    demodulatedFFT.getSingleSidedSpectrumToMax(100), 
                    spectrometerXLabel, 
                    spectrometerYLabel, 
                    spectrometerXTickUnits, 
                    spectrometerYTickUnits, 
                    lineChartType.DEFAULT);
            spectrometer.pack();
        }
    }//GEN-LAST:event_demodulateButtonActionPerformed

    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
        if (validateFiltering()) {
            
            String filterType = filterTypeComboBox.getSelectedItem().toString();
            
            if ("Low Pass".equals(filterType)) {
                double cutoffFreq = Double.parseDouble(filterCutoffFreqTextField.getText());
                                
                lpFilter = new LPF(samplingFrequency, cutoffFreq, demodulatedSignal.getSignal());
                double[] filtered = lpFilter.getFiltered();
//              double[] filtered_ampd = ArrayFunctions.setMaxAmplitude(filtered, 1);
                
                filteredSignal = new Signal(getSampleNumber());
                filteredSignal.setSignal(filtered);
//              filteredSignal.setSignal(filtered_ampd);
                
//              PLOT SAMPLES
                oscilloscope.sendData(
                    "Filtered signal", 
                    samplingIntervals, 
                    filteredSignal.getSignal(), 
                    oscilloscopeXLabel, 
                    oscilloscopeYLabel, 
                    oscilloscopeXTickUnits, 
                    oscilloscopeYTickUnits, 
                    lineChartType.DEFAULT);
                oscilloscope.pack();
                
                SignalFFT filteredFFT = new SignalFFT(samplingFrequency, filteredSignal.getSignal());
                spectrometer.sendData(
                    "Filtered signal", 
                    filteredFFT.getFrequenciesToMax(100), 
                    filteredFFT.getSingleSidedSpectrumToMax(100), 
                    spectrometerXLabel, 
                    spectrometerYLabel, 
                    spectrometerXTickUnits, 
                    spectrometerYTickUnits, 
                    lineChartType.DEFAULT);
                spectrometer.pack();
            }
        }
    }//GEN-LAST:event_filterButtonActionPerformed

    private void thresholdButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thresholdButtonActionPerformed
        
    }//GEN-LAST:event_thresholdButtonActionPerformed

    private boolean validateInput() {
        try {
            double bit1 = Double.parseDouble(inputBit1TextField.getText());
            double bit2 = Double.parseDouble(inputBit2TextField.getText());
            double bit3 = Double.parseDouble(inputBit3TextField.getText());
            double bit4 = Double.parseDouble(inputBit4TextField.getText());
            
            double[] bits = new double[]{bit1, bit2, bit3, bit4};
            
            for (int i = 0; i < bits.length; i++) {
                if (!((bits[i] == 0) || (bits[i] == 1))) {
                    inputWarningLabel.setText("Input bits must contain 0 or 1");
                    return false;
                }
            }
        } catch (NumberFormatException e) {   
            inputWarningLabel.setText("Please input valid bits");
            return false;
        }
        
        inputWarningLabel.setText(" ");
        return true;
    }
    
    private boolean validateEncodingandSampling() {
        if (inputSignal == null) {
            encodeWarningLabel.setText("Please enter input above.");
            return false;
        }
        
        encodeWarningLabel.setText(" ");
        return true;
    }
    
    private boolean validateCarrierGeneration() {
        if (basebandSignal == null) {
            carrierWarningLabel.setText("Please enter samples above.");
            return false;
        }
        
        carrierWarningLabel.setText(" ");
        return true;
    }
    
    private boolean validateModulation() {
        if (carrierSignal == null) {
            modulateWarningLabel.setText("Please generate a carrier.");
            return false;
        }
        if (basebandSignal == null) {
            modulateWarningLabel.setText("Please enter samples above.");
        }
        modulateWarningLabel.setText(" ");
        return true;
    }
    
    private boolean validateImpairment() {
        if (modulatedSignal == null) {
            impairmentWarningLabel.setText("Please perform modulation.");
            return false;
        }
        try {
            Double.parseDouble(impairmentPowerTextField.getText());
        } catch (NumberFormatException e) {
            impairmentWarningLabel.setText("Please input a valid noise power value.");
            return false;
        }
        impairmentWarningLabel.setText(" ");
        return true;
    }
    
    private boolean validateDemodulation() {
        if (receivedSignal == null) {
            demodulationWarningLabel.setText("Please input impairment parameters above.");
            return false;
        }
        demodulationWarningLabel.setText(" ");
        return true;
    }
    
    private boolean validateFiltering() {
        if (demodulatedSignal == null) {
            filteringWarningLabel.setText("Please perform demodulation.");
            return false;
        }
        try {
            Double.parseDouble(filterCutoffFreqTextField.getText());
        } catch (NumberFormatException e) {
            impairmentWarningLabel.setText("Please input a valid filter cutoff frequency.");
            return false;
        }
        filteringWarningLabel.setText(" ");
        return true;
    }
    
    private int getSampleNumber() {
        return messageSignal.getLength();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
            
            oscilloscope = new LineChart("OSCILLOSCOPE", 600, 320);
            oscilloscope.setLocation(700, 0);
            oscilloscope.setResizable(false);
            oscilloscope.pack();
            oscilloscope.setVisible(true);
            
            spectrometer = new LineChart("SPECTROMETER", 600, 320);
            spectrometer.setLocation(700, 375);
            spectrometer.setResizable(false);
            spectrometer.pack();
            spectrometer.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton carrierButton;
    private javax.swing.JComboBox<String> carrierFrequencyComboBox;
    private javax.swing.JPanel carrierPanel;
    private javax.swing.JLabel carrierWarningLabel;
    private javax.swing.JPanel codingPanel;
    private javax.swing.JComboBox<String> codingSchemeComboBox;
    private javax.swing.JLabel codingSchemeLabel;
    private javax.swing.JLabel codingSchemeLabel1;
    private javax.swing.JLabel codingSchemeLabel2;
    private javax.swing.JPanel decodePanel;
    private javax.swing.JButton demodulateButton;
    private javax.swing.JLabel demodulationWarningLabel;
    private javax.swing.JPanel domainPanel;
    private javax.swing.JButton encodeAndSampleButton;
    private javax.swing.JLabel encodeWarningLabel;
    private javax.swing.JButton filterButton;
    private javax.swing.JTextField filterCutoffFreqTextField;
    private javax.swing.JPanel filterPanel;
    private javax.swing.JTextField filterTapsTextField;
    private javax.swing.JComboBox<String> filterTypeComboBox;
    private javax.swing.JLabel filteringWarningLabel;
    private javax.swing.JButton impairmentButton;
    private javax.swing.JLabel impairmentLabel;
    private javax.swing.JLabel impairmentLabel1;
    private javax.swing.JLabel impairmentLabel2;
    private javax.swing.JPanel impairmentPanel;
    private javax.swing.JLabel impairmentPowerLabel;
    private javax.swing.JLabel impairmentPowerLabel1;
    private javax.swing.JLabel impairmentPowerLabel2;
    private javax.swing.JTextField impairmentPowerTextField;
    private javax.swing.JComboBox<String> impairmentTypeComboBox;
    private javax.swing.JLabel impairmentWarningLabel;
    private javax.swing.JTextField inputBit1TextField;
    private javax.swing.JTextField inputBit2TextField;
    private javax.swing.JTextField inputBit3TextField;
    private javax.swing.JTextField inputBit4TextField;
    private javax.swing.JLabel inputMessageLabel;
    private javax.swing.JLabel inputMessageLabel1;
    private javax.swing.JLabel inputMessageLabel2;
    private javax.swing.JLabel inputMessageLabel3;
    private javax.swing.JLabel inputMessageLabel6;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JLabel inputWarningLabel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JButton modulateButton;
    private javax.swing.JLabel modulateWarningLabel;
    private javax.swing.JPanel modulationPanel;
    private javax.swing.JComboBox<String> modulationSchemeComboBox;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JComboBox<String> sampleNoComboBox;
    private javax.swing.JLabel sampleNoLabel;
    private javax.swing.JButton sendInputButton;
    private javax.swing.JButton thresholdButton;
    private javax.swing.JButton timeDomainButton2;
    // End of variables declaration//GEN-END:variables

    private BasebandSignal inputSignal;
    private BasebandSignal basebandSignal;
    private BasebandSignal messageSignal;
    private CarrierSignal carrierSignal;
    private Signal modulatedSignal;
    private Signal receivedSignal;
    private Signal demodulatedSignal;
    private Signal filteredSignal;
    
    private BPSK BPSKmodulation;
    private final AWGN noise = new AWGN();
    private LPF lpFilter;
    
    private double samplingFrequency;
    private double samplingInterval;
    private double[] samplingIntervals;
    private final double sampleTime = 1;
    private final int filterTaps = 50;
    
    private static LineChart oscilloscope;
    private static LineChart spectrometer;
    
    private final String bitsXLabel = "Bits";
    private final String oscilloscopeXLabel = "Time (s)";
    private final String oscilloscopeYLabel = "Amplitude";
    private final String spectrometerXLabel = "Frequency (Hz)";
    private final String spectrometerYLabel = "Magnitude";
    
    private double oscilloscopeXTickUnits = 0.256;
    private final double oscilloscopeYTickUnits = 0.25;
    private final double spectrometerXTickUnits = -1;
    private final double spectrometerYTickUnits = -1;
}
