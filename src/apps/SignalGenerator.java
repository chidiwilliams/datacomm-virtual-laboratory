package apps;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import classes.charts.LineChart;
import classes.helpers.SignalFFT;
import classes.signals.CarrierSignal;
import classes.signals.WaveType;

/**
 *
 * @author chidi
 */
public class SignalGenerator extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public SignalGenerator() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        waveTypeComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        frequencyTextField = new javax.swing.JTextField();
        generateButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SIGNAL GENERATOR");
        setLocation(new java.awt.Point(100, 0));
        setName("SIGNAL GENERATOR"); // NOI18N
        setResizable(false);

        waveTypeComboBox.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        waveTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sine wave", "Cosine wave", "Square wave", "Triangular wave" }));
        waveTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waveTypeComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        jLabel1.setText("Type of wave");

        jLabel2.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        jLabel2.setText("Set frequency");

        frequencyTextField.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        frequencyTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frequencyTextFieldActionPerformed(evt);
            }
        });

        generateButton.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        generateButton.setText("GENERATE");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 16)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("SIGNAL GENERATOR");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(40, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(waveTypeComboBox, 0, 162, Short.MAX_VALUE)
                            .addComponent(frequencyTextField))))
                .addContainerGap(56, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(waveTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(frequencyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(generateButton)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void waveTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waveTypeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_waveTypeComboBoxActionPerformed

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        String wavetype = (String) waveTypeComboBox.getSelectedItem();
        int frequency = Integer.parseInt(frequencyTextField.getText());
        
        samplingIntervals = new double[samples];
        for (int i = 0; i < samplingIntervals.length; i++) {
            samplingIntervals[i] = Math.pow(samples, -1) * i;
        }
                
        if (null != wavetype) switch (wavetype) {
            case "Sine wave":
                waveSignal = new CarrierSignal(WaveType.SIN, samples, frequency, 0);
                break;
            case "Cosine wave":
                waveSignal = new CarrierSignal(WaveType.COS, samples, frequency, 0);
                break;
            case "Square wave":
                waveSignal = new CarrierSignal(WaveType.SQUARE, samples, frequency, 0);
                break;
            default:
                break;
        }
        
//      PLOT SAMPLES
        oscilloscope.sendData(
            wavetype,
            samplingIntervals,
            waveSignal.getSignal(),
            oscilloscopeXLabel,
            oscilloscopeYLabel,
            oscilloscopeXTickUnits,
            oscilloscopeYTickUnits,
            -1);
        oscilloscope.pack();
        
        SignalFFT carrierFFT = new SignalFFT(samplingFrequency, waveSignal.getSignal());
        spectrometer.sendData(
            wavetype,
            carrierFFT.getFrequenciesToMax(100),
            carrierFFT.getSingleSidedSpectrumToMax(100),
            spectrometerXLabel,
            spectrometerYLabel,
            spectrometerXTickUnits,
            spectrometerYTickUnits,
            -1);
        spectrometer.pack();
    }//GEN-LAST:event_generateButtonActionPerformed

    private void frequencyTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frequencyTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_frequencyTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SignalGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SignalGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SignalGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SignalGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SignalGenerator().setVisible(true);
            
            oscilloscope = new LineChart("OSCILLOSCOPE", 600, 320);
            oscilloscope.setLocation(500, 0);
            oscilloscope.setResizable(false);
            oscilloscope.pack();
            oscilloscope.setVisible(true);
            
            spectrometer = new LineChart("SPECTROMETER", 600, 320);
            spectrometer.setLocation(500, 400);
            spectrometer.setResizable(false);
            spectrometer.pack();
            spectrometer.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField frequencyTextField;
    private javax.swing.JButton generateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JComboBox<String> waveTypeComboBox;
    // End of variables declaration//GEN-END:variables

    private static LineChart oscilloscope;
    private static LineChart spectrometer;
    
    private final String bitsXLabel = "Bits";
    private final String oscilloscopeXLabel = "Time (s)";
    private final String oscilloscopeYLabel = "Amplitude";
    private final String spectrometerXLabel = "Frequency (Hz)";
    private final String spectrometerYLabel = "Magnitude";
    
    private final double oscilloscopeXTickUnits = 0.256;
    private final double oscilloscopeYTickUnits = -1;
    private final double spectrometerXTickUnits = 8;
    private final double spectrometerYTickUnits = -1;
    
    private CarrierSignal waveSignal;
    private final int samples = 2048;    
    private final double samplingFrequency = 2048;
    private double[] samplingIntervals = new double[2048];
}
